.include "MACROSv21.s"

.data
mapa:
.include "mapa1_teste.data"
.include "hitbox_mapateste2.data"
.include "GauntletRoom001MapBG.data"
.include "escotilha_aberta.data"
.include "tile.data"
.include "tile1.data"
.include "tile2.data"
lamar:
.include "lamar_cima.data"
.include "lamar_baixo.data"
.include "lamar_direita.data"
.include "lamar_esquerda.data"

CHAR_POS:	.half 8,8			# x, y
OLD_CHAR_POS:	.half 8,8			# x, y
SAIDA_POS: 	.half 8,216			# x, y
.text
# Carrega a imagem1
setup:
	la a0,mapa1_teste
	li a1,0				# x = 0
	li a2,0				# y = 0
	li a3,0				# frame = 0
	call print			# imprime o sprite
	li a3,1				# frame = 1
	call print			# imprime o sprite
	# esse setup serve pra desenhar o "mapa" nos dois frames antes do "jogo" comecar
 	la s3,lamar_baixo
 	li s11,0
 	j GAME_LOOP
CHECK_KEY:
	beq s11,zero,game_loop1
	la t0,SAIDA_POS
	la a0,escotilha_aberta			# carrega o endereco do sprite 'char' em a0
	lh a1,0(t0)			# carrega a posicao x do personagem em a1
	lh a2,2(t0)			# carrega a posicao y do personagem em a2
	mv a3,s0			# carrega o valor do frame em a3
	call print
	j sair
CHAVE:
	li s11,1
	j game_loop1
GAME_LOOP:
	la t0,CHAR_POS
	lh a1,0(t0)
	lh a2,2(t0)

	mv t3,a1
	mv t4,a2
	
	li t5,320
	mul a1,t4,t5	# y * 320
	add a1,a1,t3	# a1 += x

	la t4,hitbox_mapateste2
	addi t4,t4,8
	add t4,t4,a1
	lw t4,0(t4)
	li t5,0x37373737
	beq t4,t5,CHAVE
	#li t6,0x38383838
	#beq t4,t6,CHECK_KEY
	
game_loop1:
	call KEY2			# chama o procedimento de entrada do teclado
		
	xori s0,s0,1			# inverte o valor frame atual (somente o registrador)
	
	la t0,CHAR_POS			# carrega em t0 o endereco de CHAR_POS
	
	mv a0,s3			# carrega o endereco do sprite 'char' em a0
	lh a1,0(t0)			# carrega a posicao x do personagem em a1
	lh a2,2(t0)			# carrega a posicao y do personagem em a2
	mv a3,s0			# carrega o valor do frame em a3
	call print			# imprime o sprite
	
	li t0,0xFF200604		# carrega em t0 o endereco de troca de frame
	sw s0,0(t0)			# mostra o sprite pronto para o usuario
	
	la t0,OLD_CHAR_POS		# carrega em t0 o endereco de OLD_CHAR_POS
	
	la a0,tile			# carrega o endereco do sprite 'tile' em a0
	lh a1,0(t0)			# carrega a posicao x antiga do personagem em a1
	lh a2,2(t0)			# carrega a posicao y antiga do personagem em a2
	
	mv a3,s0			# carrega o frame atual (que esta na tela em a3)
	xori a3,a3,1			# inverte a3 (0 vira 1, 1 vira 0)
	call print			# imprime
	
	la t0,CHAR_POS
	lh a1,0(t0)
	lh a2,2(t0)

	mv t3,a1
	mv t4,a2
	
	li t5,320
	mul a1,t4,t5	# y * 320
	add a1,a1,t3	# a1 += x

	la t4,hitbox_mapateste2
	addi t4,t4,8
	add t4,t4,a1
	lw t4,0(t4)
	li t6,0x38383838
	beq t4,t6,CHECK_KEY

	j GAME_LOOP
	
### Apenas verifica se há tecla pressionada
KEY2:	li t1,0xFF200000		# carrega o endereco de controle do KDMMIO
	lw t0,0(t1)			# Le bit de Controle Teclado
	andi t0,t0,0x0001		# mascara o bit menos significativo
   	beq t0,zero,FIM   	   	# Se nao ha tecla pressionada entao vai para FIM
  	lw t2,4(t1)  			# le o valor da tecla tecla
	
	li t0,'w'
	beq t2,t0,CHAR_UP		# se tecla pressionada for 'w', chama CHAR_CIMA
	
	li t0,'a'
	beq t2,t0,CHAR_LEFT		# se tecla pressionada for 'a', chama CHAR_CIMA
	
	li t0,'s'
	beq t2,t0,CHAR_DOWN		# se tecla pressionada for 's', chama CHAR_CIMA
	
	li t0,'d'
	beq t2,t0,CHAR_RIGHT		# se tecla pressionada for 'd', chama CHAR_CIMA
	
FIM:	ret				# retorna

CHAR_UP:
	la t0,CHAR_POS			# carrega em t0 o endereco de CHAR_POS
	la t1,OLD_CHAR_POS		# carrega em t1 o endereco de OLD_CHAR_POS
	lw t2,0(t0)
	sw t2,0(t1)			# salva a posicao atual do personagem em OLD_CHAR_POS
	
	la t0,CHAR_POS
	lh t6,0(t0)
	lh t1,2(t0)			# carrega o y atual do personagem
	
	li t4,-8
	li t5,320
	mul t4,t5,t4
	mul a1,t1,t5	# y * 320
	add a1,a1,t6	# a1 += x
	add a1,a1,t4
	
	la t4,hitbox_mapateste2
	addi t4,t4,8
	add t4,t4,a1
	lb t4,0(t4)
	li t5,0xffffffC8
	beq t4,t5,GAME_LOOP
	li t6,0x00000038
	beq t4,t6,CHECK_KEY
	
	addi t1,t1,-16			# decrementa 16 pixeis
	sh t1,2(t0)
	la s3,lamar_cima		# salva
	ret
CHAR_DOWN:
	la t0,CHAR_POS			# carrega em t0 o endereco de CHAR_POS
	la t1,OLD_CHAR_POS		# carrega em t1 o endereco de OLD_CHAR_POS
	lw t2,0(t0)
	sw t2,0(t1)			# salva a posicao atual do personagem em OLD_CHAR_POS
	
	la t0,CHAR_POS
	lh t6,0(t0)
	lh t1,2(t0)			# carrega o y atual do personagem
	
	li t4,16
	li t5,320
	mul t4,t5,t4
	mul a1,t1,t5	# y * 320
	add a1,a1,t6	# a1 += x
	add a1,a1,t4
	
	la t4,hitbox_mapateste2
	addi t4,t4,8
	add t4,t4,a1
	lb t4,0(t4)
	li t5,0xffffffC8
	beq t4,t5,GAME_LOOP
	li t6,0x00000038
	beq t4,t6,CHECK_KEY
	
	la t0,CHAR_POS
	lh t1,2(t0)			# carrega o y atual do personagem
	addi t1,t1,16			# incrementa 16 pixeis
	sh t1,2(t0)
	la s3,lamar_baixo			# salva
	ret
CHAR_LEFT:	
	la t0,CHAR_POS			# carrega em t0 o endereco de CHAR_POS
	la t1,OLD_CHAR_POS		# carrega em t1 o endereco de OLD_CHAR_POS
	lw t2,0(t0)
	sw t2,0(t1)			# salva a posicao atual do personagem em OLD_CHAR_POS
	
	la t0,CHAR_POS
	lh t6,0(t0)
	lh t1,2(t0)			# carrega o y atual do personagem
	
	mv t3,t6
	addi t3,t3,-8
	
	li t4,0
	li t5,320
	mul t4,t5,t4
	mul a1,t1,t5	# y * 320
	add a1,a1,t3	# a1 += x
	add a1,a1,t4
	
	la t4,hitbox_mapateste2
	addi t4,t4,8
	add t4,t4,a1
	lb t4,0(t4)
	li t5,0xffffffC8
	beq t4,t5,GAME_LOOP
	li t6,0x00000038
	beq t4,t6,CHECK_KEY
	
	lh t1,0(t0)			# carrega o x atual do personagem
	addi t1,t1,-16			# decrementa 16 pixeis
	sh t1,0(t0)
	la s3,lamar_esquerda			# salva
	ret
CHAR_RIGHT:	
	la t0,CHAR_POS			# carrega em t0 o endereco de CHAR_POS
	la t1,OLD_CHAR_POS		# carrega em t1 o endereco de OLD_CHAR_POS
	lw t2,0(t0)
	sw t2,0(t1)			# salva a posicao atual do personagem em OLD_CHAR_POS
	
	la t0,CHAR_POS
	lh t6,0(t0)
	lh t1,2(t0)			# carrega o y atual do personagem
	
	mv t3,t6
	addi t3,t3,23
	
	li t4,0
	li t5,320
	mul t4,t5,t4
	mul a1,t1,t5	# y * 320
	add a1,a1,t3	# a1 += x
	add a1,a1,t4
	
	la t4,hitbox_mapateste2
	addi t4,t4,8
	add t4,t4,a1
	lb t4,0(t4)
	li t5,0xffffffC8
	beq t4,t5,GAME_LOOP
	li t6,0x00000038
	beq t4,t6,CHECK_KEY
	
	lh t1,0(t0)			# carrega o x atual do personagem
	addi t1,t1,16			# incrementa 16 pixeis
	sh t1,0(t0)			# salva
	la s3,lamar_direita			
	ret
	
print:
	li t0,0xFF0			# carrega 0xFF0 em t0
	add t0,t0,a3			# adiciona o frame ao FF0 (se o frame for 1 vira FF1, se for 0 fica FF0)
	slli t0,t0,20			# shift de 20 bits pra esquerda (0xFF0 vira 0xFF000000, 0xFF1 vira 0xFF100000)
	
	add t0,t0,a1			# adiciona x ao t0
	
	li t1,320			# t1 = 320
	mul t1,t1,a2			# t1 = 320 * y
	add t0,t0,t1			# adiciona t1 ao t0
	
	addi t1,a0,8			# t1 = a0 + 8
	
	mv t2,zero			# zera t2
	mv t3,zero			# zera t3
	
	lw t4,0(a0)			# carrega a largura em t4
	lw t5,4(a0)			# carrega a altura em t5
	
	
PRINT_LINHA:
	lw t6,0(t1)			# carrega em t6 uma word (4 pixeis) da imagem
	sw t6,0(t0)			# imprime no bitmap a word (4 pixeis) da imagem
	
	addi t0,t0,4			# incrementa endereco do bitmap
	addi t1,t1,4			# incrementa endereco da imagem
	
	addi t3,t3,4			# incrementa contador de coluna
	blt t3,t4,PRINT_LINHA		# se contador da coluna < largura, continue imprimindo

	addi t0,t0,320			# t0 += 320
	sub t0,t0,t4			# t0 -= largura da imagem
	# ^ isso serve pra "pular" de linha no bitmap display
	
	mv t3,zero			# zera t3 (contador de coluna)
	addi t2,t2,1			# incrementa contador de linha
	bgt t5,t2,PRINT_LINHA		# se altura > contador de linha, continue imprimindo
	
	ret				# retorna

sair:
	li a7,10
	ecall

.include "SYSTEMv21.s"
